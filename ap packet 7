 public void mirrorTemple()
  {
    int mirrorPoint = 276;
    Pixel leftPixel = null;
    Pixel rightPixel = null;
    int count = 0;
    Pixel[][] pixels = this.getPixels2D();
    
    // loop through the rows
    for (int row = 27; row < 97; row++)
    {
      // loop from 13 to just before the mirror point
      for (int col = 13; col < mirrorPoint; col++)
      {
        
        leftPixel = pixels[row][col];      
        rightPixel = pixels[row]                       
                         [mirrorPoint - col + mirrorPoint];
        rightPixel.setColor(leftPixel.getColor());
        count++;
      }
    }
    System.out.print(count);
  } //count = 18410
  ---------------------------------------------------------------------------------------------
  public void mirrorSnowman()
  {
    int mirrorPoint = 190;
    int mirror = 193;
    Pixel topPixel = null;
    Pixel bottomPixel = null;
    int count = 0;
    Pixel[][] pixels = this.getPixels2D();
    

    for (int row = 155; row < mirrorPoint; row++)
    {
      for (int col = 103; col < 169 ; col++)
      {
        
        topPixel = pixels[row][col];      
        bottomPixel = pixels[mirrorPoint-row+mirrorPoint][col];
        bottomPixel.setColor(topPixel.getColor());
      }
    }
    for (int row = 168; row < mirror; row++)
    {
      for (int col = 237; col < 297 ; col++)
      {
        
        topPixel = pixels[row][col];      
        bottomPixel = pixels[mirror-row + mirror][col];
        bottomPixel.setColor(topPixel.getColor());
      }
    }
  }
--------------------------------------------------------------------------------------------------------
public void mirrorGull()
  {
    Pixel[][] pixels = this.getPixels2D();
    Pixel leftPixel = null;
    Pixel rightPixel = null;
    int maxLength = 345;
    int width = pixels[0].length;
    for (int row = 226; row < 324; row++)
    {
      for (int col = 232; col < maxLength; col++)
      {
        rightPixel = pixels[row][col];
        leftPixel = pixels[row][maxLength - col + maxLength/3];
        leftPixel.setColor(rightPixel.getColor());
      }
    } 
  }
