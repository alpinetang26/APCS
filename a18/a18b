import java.util.*;
/**
 * 
 */
public class RecursiveMergeSort
{
   public void mergeSort(ArrayList <Comparable> a, int first, int last){
   //int size = last-first +1;
   
   if (last-first +1 == 1){
      
   } else if ((last - first +1) == 2){
      if(a.get(last).compareTo(a.get(first))<1){ //if second is smaller than first
          int temp = (int)a.get(first); //save first value
          a.set(first, a.get(last));
          a.set(last, temp);
        }
   }else{ // recursion, divide list into two halves
      int middle = (first + last)/2 ;  
      
      mergeSort(a, first, middle); //cal mergeSort method of left sublist
      mergeSort(a,middle+1,last); //call mergesort method
      
      
      //merge(a, first, middle last);
   } 
}


public void merge (ArrayList<Comparable> a, int first, int middle, int last){
    int n1 = first; //used to traverse left arraylist
    int n2 = middle+1;
    
   
    ArrayList<Comparable> b = new ArrayList<Comparable> (); //new temporary arraylist to be filled
    
    while (b.size()< (last-first+1)) { //while the new arraylist is smaller than the given size
       
        if (n1>=middle){ //left list is done, pull from right
            b.add(a.get(n2));
            n2++;
        }
        else if(n2>=last){//right list is done, pull from left
            b.add(a.get(n1));
            n2++;
        }
        else if(a.get(n2).compareTo(a.get(n1))>=1){ //right bigger than left, pull from left
            b.add(a.get(n1));
            n1++;
        }
        else{ //else, add the one from right
            b.add(a.get(n2));
            n2++;
        }
        
    }
    
    //now that we have a sorted arraylist b, we want to put it into a
    
    for (int i = first; i<=last; i++){
        int bIndex = 0;
        
        a.set(i,b.get(bIndex));
        bIndex++;
    
    }
    
} 
}
